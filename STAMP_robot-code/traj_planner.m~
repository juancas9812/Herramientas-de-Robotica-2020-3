%Esta función sirve para planear la trayectoria de un robot, ya sea un
%perfil de velocidad trapezoidal o un spline 3D

%Entradas: 
%Type: Tipo de trayectoria: 1=Línea, 2=Spline3D
%arg1: Puntos de control de la trayectoria: posición [x1 y1 z1 ; ……xn yn zn]
%      (linea p0, p1)(spline [x1 y1 z1 ; ……xn yn zn])
%arg2: línea: (velocidad máxima Vk), splines3D: (vector de tiempos de cada punto-control)
%arg3: línea: (% aceleración/desaceleración), splines3D: (velocidad inicial/final Vo, Vf).
%arg4: tiempo de muestreo. 

%Salidas:
%traj: [Xref Yref Zref Vxref Vyref Vzref Axref Ayref Azref time] 

function [traj]=traj_planner(Type   ,   arg1      ,   arg2,   arg3,  arg4,t0)
                            %line%    %[p0;p1]%       %Vk%    %pt%    %Ts%
                            %spline%  %[p0;...;pn]%    ...
if(Type==1)
    
    T=(norm(arg1(1,:)-arg1(2,:))/(arg2*(1-arg3)));  %Se calcula el tiempo a partir de la velocidad max
    
    n=round(T/arg4);  %Se calcula el numero de puntos de la trayectoria
    
    n1=round(arg3*n); %Se calcula el numero de puntos para los segmentos acelerados
    n3=n1;
    n2=n-n1-n3; %Se calcula el numero de puntos para el segmento de velocidad constante
    
    tau=T * arg3;  %Se calcula el tiempo para los segmentos acelerados
    
    at=arg2/tau;  %Aceleración del primer segmento
    
    Pt=(0.5*at*(tau.^2)*(arg1(2,:)-arg1(1,:)))/norm(arg1(2,:)-arg1(1,:))+arg1(1,:);
    
    Ptt=(arg2*(T-2*tau)*(arg1(2,:)-arg1(1,:)))/norm(arg1(2,:)-arg1(1,:))+Pt;
    
    Xseg1=[];
    Yseg1=[];%Vyseg1=[];Ayseg1=[];
    Zseg1=[];%Vzseg1=[];Vzseg1=[];
    Ps1=[];
    T1=[];
    for tk1=0:(tau/(n1)):tau %Se calculan los puntos para el primer tramo y se concatenan
        Ps1=[Ps1;(0.5*at*(tk1.^2)*(Pt-arg1(1,:)))/norm(Pt-arg1(1,:))+arg1(1,:)];
        T1=[T1;tk1];
    end
    
    Xseg2=[];%Vxseg2=[];Axseg2=[];
    Yseg2=[];%Vyseg2=[];Ayseg2=[];
    Zseg2=[];%Vzseg2=[];Vzseg2=[];
    T2=[];
    Ps2=[];
    for tk2= 0:(T-2*tau)/(n2):(T-2*tau)  %Se calculan los puntos para el segundo tramo y se concatenan
        Ps2=[Ps2;(arg2*tk2*(Ptt-Pt))/norm(Ptt-Pt)+Pt];
        T2=[T2;tk2+tau];
    end
    
    Xseg3=[];%Vxseg3=[];Axseg3=[];
    Yseg3=[];%Vyseg3=[];Ayseg3=[];
    Zseg3=[];%Vzseg3=[];Azseg3=[];
    T3=[];
    Ps3=[];
    at3=-arg2/tau;
    for tk3=0:(tau/(n3)):tau  %Se calculan los puntos para el tercer tramo y se concatenan
        Ps3=[Ps3;((0.5*at3*(tk3.^2)+arg2*tk3)*(arg1(2,:)-Ptt))/norm(arg1(2,:)-Ptt)+Ptt];
        T3=[T3;tk3+T-tau];
    end
    T2(1,:)=[];T3(1,:)=[]; 
    T=[T1;T2;T3];   %Se obtiene el vector de tiempo de toda la trayectoria si repetir puntos
    Ps2(1,:)=[];Ps3(1,:)=[];
    PPP=[Ps1;Ps2;Ps3];  %Se obtienen los puntos de la trayectoria sin repetir puntos
    len=size(PPP);  %Se obtiene el numero de puntos de la trayectoria
    V=[0 0 0];
    for i=2:len(1)  %Se obtiene la velocidad a partir de la posición
        V=[V;norm((PPP(i,1)-PPP((i-1),1))/arg4),norm((PPP(i,2)-PPP((i-1),2))/arg4),norm((PPP(i,3)-PPP((i-1),3))/arg4)]; 
    end
    A=[0 0 0];
    for j=2:len(1)  %Se obtiene la aceleracion a partir de la velocidad
       A=[A;(V(j,:)-V((j-1),:))/arg4];   
    end
    [rr,cc]=size
    TTT
    
end



traj=[PPP V A T];

end